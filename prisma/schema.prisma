generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}





// lets have "Updates" in the database


model Update {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  githubPrRef String?
  date DateTime
  title String
  body String
}

model User {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  githubId      String     @unique
  username      String
  repositories  Repository[]
}

model Repository {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  githubId      Int
  name          String
  fullName      String
  owner         String
  user          User       @relation(fields: [userId], references: [id])
  userId        String

  @@unique([userId, githubId])
}




model Repo {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // what else should we store? 

  isPending Boolean @default(true)
  embeddings Embedding[]
}


model Embedding {
  id         String                      @default(cuid())
  createdAt  DateTime                    @default(now())
  embedding  Unsupported("vector(1536)")
  content    String
  repo   Repo                     @relation(fields: [repoId], references: [id], onDelete: Cascade)
  repoId String

  @@id([id, repoId])
  @@index([repoId])
}







// lets setup like a general - no auth - repo question test. 
// heres how it works - enter the path to the repo, repo gets added as one of the repos in the db - so we see it in the list too - and when 
// it is finished ingestion, we can click into it and ask a question (simple input - return text under it)





