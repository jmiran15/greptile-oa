generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  githubId     String   @unique
  username     String
  displayName  String?
  avatarUrl    String?
  repositories Repo[]
}

// WIP

model Repo {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String // Repository name
  fullName        String // Full name (owner/repo)
  description     String? // Repository description
  defaultBranch   String
  stargazersCount Int      @default(0)

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Processing fields
  isPending  Boolean     @default(true)
  embeddings Embedding[]
  nodes      RepoNode[]
  changelogs Changelog[]

  @@unique([userId, fullName])
}

model RepoNode {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  path      String // Full path in the repo
  type      Type     @default(file)
  status    Status   @default(pending) // "pending" | "processing" | "completed" | "failed"

  url        String // store the url instead of the content? 
  sha        String // the sha of the file
  // content       String?  // For files, store the content
  embeddings Embedding[]

  // Relationships
  repo     Repo       @relation(fields: [repoId], references: [id], onDelete: Cascade)
  repoId   String
  parent   RepoNode?  @relation("NodeHierarchy", fields: [parentId], references: [id])
  parentId String?
  children RepoNode[] @relation("NodeHierarchy")

  upstreamSummary   String? // from the initial upwards pass
  downstreamSummary String? // from the downwards pass

  @@unique([repoId, path])
  @@index([repoId, status])
  @@index([parentId])
}

enum Status {
  pending
  processing
  completed
  failed
}

enum Type {
  file
  folder
}

model Embedding {
  id        String                      @default(cuid())
  createdAt DateTime                    @default(now())
  embedding Unsupported("vector(1536)")

  chunkContent    String
  embeddedContent String // this is an augmentation
  repo            Repo   @relation(fields: [repoId], references: [id], onDelete: Cascade)
  repoId          String // this seems unnecessary since we have node - but is used for being able to query at the repo level 

  node   RepoNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  nodeId String

  @@id([id, repoId])
  @@index([repoId])
}

model Changelog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // the repo
  repo   Repo   @relation(fields: [repoId], references: [id], onDelete: Cascade)
  repoId String

  // the pr info 

  // the status

  // the actual content
}
